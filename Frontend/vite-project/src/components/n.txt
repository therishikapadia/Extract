"use client";
import React, { useState } from "react";
import { Sidebar, SidebarBody, SidebarLink } from "../ui/sidebar";
import {
  IconArrowLeft,
  IconBrandTabler,
  IconSettings,
  IconUserBolt,
} from "@tabler/icons-react";
import { motion } from "motion/react";
import { cn } from "@/lib/utils";

export function SidebarDemo() {
  const links = [
    {
      label: "Dashboard",
      href: "#",
      icon: (
        <IconBrandTabler className="h-5 w-5 shrink-0 text-neutral-700 dark:text-neutral-200" />
      ),
    },
    {
      label: "Profile",
      href: "#",
      icon: (
        <IconUserBolt className="h-5 w-5 shrink-0 text-neutral-700 dark:text-neutral-200" />
      ),
    },
    {
      label: "Settings",
      href: "#",
      icon: (
        <IconSettings className="h-5 w-5 shrink-0 text-neutral-700 dark:text-neutral-200" />
      ),
    },
    {
      label: "Logout",
      href: "#",
      icon: (
        <IconArrowLeft className="h-5 w-5 shrink-0 text-neutral-700 dark:text-neutral-200" />
      ),
    },
  ];
  const [open, setOpen] = useState(false);
  return (
    <div
      className={cn(
        "mx-auto flex w-full max-w-7xl flex-1 flex-col overflow-hidden rounded-md border border-neutral-200 bg-gray-100 md:flex-row dark:border-neutral-700 dark:bg-neutral-800",
        // for your use case, use `h-screen` instead of `h-[60vh]`
        "h-[60vh]"
      )}>
      <Sidebar open={open} setOpen={setOpen}>
        <SidebarBody className="justify-between gap-10">
          <div className="flex flex-1 flex-col overflow-x-hidden overflow-y-auto">
            {open ? <Logo /> : <LogoIcon />}
            <div className="mt-8 flex flex-col gap-2">
              {links.map((link, idx) => (
                <SidebarLink key={idx} link={link} />
              ))}
            </div>
          </div>
          <div>
            <SidebarLink
              link={{
                label: "Rishi Kapadia",
                href: "#",
                icon: (
                  <img
                    src="https://assets.aceternity.com/manu.png "
                    className="h-7 w-7 shrink-0 rounded-full"
                    width={50}
                    height={50}
                    alt="Avatar" />
                ),
              }} />
          </div>
        </SidebarBody>
      </Sidebar>
      <Dashboard />
    </div>
  );
}
export const Logo = () => {
  return (
    <a
      href="#"
      className="relative z-20 flex items-center space-x-2 py-1 text-sm font-normal text-black">
      <div
        className="h-5 w-6 shrink-0 rounded-tl-lg rounded-tr-sm rounded-br-lg rounded-bl-sm bg-black dark:bg-white" />
      <motion.span
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="font-medium whitespace-pre text-black dark:text-white">
        Acet Labs
      </motion.span>
    </a>
  );
};
export const LogoIcon = () => {
  return (
    <a
      href="#"
      className="relative z-20 flex items-center space-x-2 py-1 text-sm font-normal text-black">
      <div
        className="h-5 w-6 shrink-0 rounded-tl-lg rounded-tr-sm rounded-br-lg rounded-bl-sm bg-black dark:bg-white" />
    </a>
  );
};

// Dummy dashboard component with content
const Dashboard = () => {
  return (
    <div className="flex flex-1">
      <div
        className="flex h-full w-full flex-1 flex-col gap-2 rounded-tl-2xl border border-neutral-200 bg-white p-2 md:p-10 dark:border-neutral-700 dark:bg-neutral-900">
        <div className="flex gap-2">
          {[...new Array(4)].map((i, idx) => (
            <div
              key={"first-array-demo-1" + idx}
              className="h-20 w-full animate-pulse rounded-lg bg-gray-100 dark:bg-neutral-800"></div>
          ))}
        </div>
        <div className="flex flex-1 gap-2">
          {[...new Array(2)].map((i, idx) => (
            <div
              key={"second-array-demo-1" + idx}
              className="h-full w-full animate-pulse rounded-lg bg-gray-100 dark:bg-neutral-800"></div>
          ))}
        </div>
      </div>
    </div>
  );
};
import React, { useRef, useState } from 'react';
import ReactMarkdown from 'react-markdown';
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || "";

const mockLLMResponse = async (message, image) => {
  // Simulate LLM response delay
  return new Promise((resolve) => {
    setTimeout(() => {
      if (image) {
        // Simulate a detailed LLM response for the uploaded label
        resolve("Here is a detailed analysis of your uploaded nutrient label: [Simulated LLM response with nutrients, ingredients, and health info. Ask any question about this label!]");
      } else {
        resolve(`LLM: You said: "${message}"`);
      }
    }, 1200);
  });
};

const ChatApp = () => {
  const [messages, setMessages] = useState([]); // {role: 'user'|'llm', type: 'text'|'image'|'markdown', content: string|File}
  const [input, setInput] = useState('');
  const [isAwaiting, setIsAwaiting] = useState(false);
  const [imageUploaded, setImageUploaded] = useState(false);
  const [analysisId, setAnalysisId] = useState(null);
  const fileInputRef = useRef(null);
  const chatBottomRef = useRef(null);

  const handleImageUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;
    setMessages((prev) => [...prev, { role: 'user', type: 'image', content: file }]);
    setImageUploaded(true);
    setIsAwaiting(true);
    const llmMsg = await mockLLMResponse('', file);
    setMessages((prev) => [...prev, { role: 'llm', type: 'text', content: llmMsg }]);
    setIsAwaiting(false);
  };

  const handleSend = async () => {
    if (!input.trim()) return;
    const userMsg = { role: 'user', type: 'text', content: input };
    setMessages((prev) => [...prev, userMsg]);
    setInput('');
    setIsAwaiting(true);
    try {
      // Prepare history of Q&A for context
      const history = [];
      let lastQ = null, lastA = null;
      messages.forEach((msg) => {
        if (msg.role === 'user' && msg.type === 'text') lastQ = msg.content;
        if (msg.role === 'llm' && (msg.type === 'text' || msg.type === 'markdown')) {
          lastA = msg.content;
        }
        if (lastQ && lastA) {
          history.push({ question: lastQ, answer: lastA });
          lastQ = null; lastA = null;
        }
      });
      // Use the most recent analysisId
      const id = analysisId || sessionStorage.getItem('analysisId');
      if (!id) {
        setMessages((prev) => [...prev, { role: 'llm', type: 'text', content: 'No analysis context found.' }]);
        setIsAwaiting(false);
        return;
      }
      const res = await fetch(`${API_BASE_URL}/chat/`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          analysis_id: id,
          question: input,
          history,
        }),
      });
      const data = await res.json();
      if (data.answer) {
        setMessages((prev) => [...prev, { role: 'llm', type: 'markdown', content: data.answer }]);
      } else {
        setMessages((prev) => [...prev, { role: 'llm', type: 'text', content: data.error || 'No answer from LLM.' }]);
      }
    } catch (e) {
      setMessages((prev) => [...prev, { role: 'llm', type: 'text', content: 'Error contacting backend.' }]);
    }
    setIsAwaiting(false);
  };

  React.useEffect(() => {
    chatBottomRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, isAwaiting]);

  React.useEffect(() => {
    // On mount, check for uploaded file and analysis result in sessionStorage
    const uploadedFile = sessionStorage.getItem("uploadedFile");
    const analysisResult = sessionStorage.getItem("analysisResult");
    const analysisFull = sessionStorage.getItem("analysisFull");
    const analysisIdStored = sessionStorage.getItem("analysisId");
    let analysisMarkdown = null;
    if (analysisFull) {
      try {
        const parsed = JSON.parse(analysisFull);
        analysisMarkdown = parsed.analysis || null;
      } catch (e) {
        analysisMarkdown = null;
      }
    }
    if (uploadedFile && !imageUploaded) {
      setImageUploaded(true);
      setMessages([
        { role: 'user', type: 'image', content: uploadedFile },
      ]);
      setIsAwaiting(true);
      setTimeout(() => {
        const newMessages = [
          { role: 'user', type: 'image', content: uploadedFile },
        ];
        if (analysisMarkdown) {
          newMessages.push({ role: 'llm', type: 'markdown', content: analysisMarkdown });
        }
        setMessages(newMessages);
        setIsAwaiting(false);
      }, 1200);
      if (analysisIdStored) setAnalysisId(analysisIdStored);
      sessionStorage.removeItem("uploadedFile");
      sessionStorage.removeItem("analysisResult");
      sessionStorage.removeItem("analysisFull");
    }
    // eslint-disable-next-line
  }, []);

  return (
    <div className="w-full max-w-2xl mx-auto flex flex-col h-[80vh] bg-neutral-950 rounded-xl shadow-2xl border border-neutral-900 overflow-hidden">
      {/* Chat messages */}
      <div className="flex-1 overflow-y-auto p-6 space-y-4 bg-neutral-950">
        {!imageUploaded && (
          <div className="flex justify-center items-center h-full">
            <label className="flex flex-col items-center justify-center w-full h-48 border-2 border-dashed border-neutral-700 rounded-lg cursor-pointer bg-neutral-900 hover:bg-neutral-800 transition-colors">
              <svg className="w-10 h-10 mb-2 text-neutral-400" fill="none" stroke="currentColor" strokeWidth="1.5" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" d="M3 16.5V19a2.003 2.003 0 002 2h14a2.003 2.003 0 002-2v-2.5M16 10l-4-4m0 0l-4 4m4-4v12" /></svg>
              <span className="text-neutral-400">Click to upload nutrient label or ingredients image</span>
              <input type="file" accept="image/*" className="hidden" ref={fileInputRef} onChange={handleImageUpload} />
            </label>
          </div>
        )}
        {messages.map((msg, idx) => (
          <div key={idx} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-xs md:max-w-md px-4 py-2 rounded-2xl shadow-md ${msg.role === 'user' ? 'bg-neutral-800 text-white' : 'bg-neutral-900 text-neutral-200 border border-neutral-800'} ${msg.type === 'image' ? 'p-2' : ''}`}>
              {msg.type === 'image' ? (
                <img
                  src={typeof msg.content === 'string' ? msg.content : URL.createObjectURL(msg.content)}
                  alt="Uploaded nutrient label"
                  className="max-w-[200px] max-h-[200px] rounded-lg border border-neutral-700 shadow-lg bg-black"
                />
              ) : msg.type === 'markdown' ? (
                <ReactMarkdown>{msg.content}</ReactMarkdown>
              ) : (
                <span>{msg.content}</span>
              )}
            </div>
          </div>
        ))}
        {isAwaiting && (
          <div className="flex justify-start">
            <div className="max-w-xs md:max-w-md px-4 py-2 rounded-2xl shadow-md bg-neutral-900 text-neutral-400 border border-neutral-800 animate-pulse">
              LLM is typing...
            </div>
          </div>
        )}
        <div ref={chatBottomRef} />
      </div>
      {/* Input */}
      {imageUploaded && (
        <div className="bg-neutral-900 p-4 border-t border-neutral-800 flex items-center">
          <input
            type="text"
            className="flex-1 bg-neutral-800 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-neutral-700 placeholder-neutral-500 border border-neutral-700"
            placeholder="Type your message..."
            value={input}
            onChange={e => setInput(e.target.value)}
            onKeyDown={e => { if (e.key === 'Enter') handleSend(); }}
            disabled={isAwaiting}
          />
          <button
            onClick={handleSend}
            disabled={isAwaiting || !input.trim()}
            className="ml-3 px-4 py-2 rounded-lg bg-neutral-700 hover:bg-neutral-600 text-white font-semibold transition-colors disabled:opacity-50 border border-neutral-800 shadow"
          >
            Send
          </button>
        </div>
      )}
    </div>
  );
};

export default ChatApp;

i want you to make a page using this components

